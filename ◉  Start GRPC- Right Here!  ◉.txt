#####################################
  Complete cada passo, fielmente! 
#####################################

************************************************
>> Lembre-se: A nomenclatura deve ser seguida! <<
************************************************

1. Se for utilizar os exemplos práticos, antes de utilizar o gRPC_Node, 
não se esqueça de utilizar o "npm i" para que as dependências sejam baixadas.

2. Dá uma olhada na pasta Ambiente e faça a instalação das dependências, entre outros;

3. Após a configuração do ambiente: 

   - Dentro da pasta proto no arquivo .proto utilize como base o template protoTemplate.txt,
   que se encontra na pasta Templates (Utilize tanto no JAVA quanto no NODE);

   -------------------------------------------------------------------------------------------------------------------------
   Exception:
      .Em no .proto do JAVA adicione:
           option java_multiple_files = true;
     	   option java_package = "<groupId>.protos";		//Coloque o seu groupID;
	   option java_outer_classname = "<serviceName>Protos";	//Exemplo: usuarioProtos; Coloque o nome do service criado;
   
      .Clique com o botão direito do mouse no projeto -> Run As -> Maven build...
      .Um processo em background estará rodando fazendo a criação das proto classes, espere alguns segundos.
   -------------------------------------------------------------------------------------------------------------------------

   - No projeto "JAVA", o proprio pom.XML ficará encarregado de fazer a criação das classes
   com base no arquivo .proto, porém no projeto "NODE" você terá que fazer a criação das classes
   manualmente utilizando os seguintes comandos:

	//Utilização dos scripts:

        //Se estiver utilizando o linux (Fará a transformação de todos os .proto)
        npm run proto-genAllLinux

        //Se estiver utilizando o windows (Fará a transformação de todos os .proto)
        npm run proto-genAllWindows

        //Se estiver utilizando o linux ou windows (Fará a transformação de um .proto específico)
        npm run proto-gen --protoFile=nomeDoProtoFile    //Exemplo: --protoFile=usuario

4. Após executar os scripts com base nos .proto criados:

  >> Vá na pasta Template e realize os procedimentos abaixo tanto para JAVA quanto para NODE.
       .Sequencia:
        - Utilize o ModelTemplate.txt para ter como base a criação do gRPC service;
        - Utilize o ServiceTemplate.txt para ter como base a criação do gRPC service;
	- Utilize o ServerTemplate.txt para ter como base a criação do gRPC server;
        - Utilize o ClientTemplate.txt para ter como base a criação do gRPC client;

  >> No JAVA import as dependências;

5.Por fim, rode tanto o server quanto o client;

  >> JAVA => No eclipse use o PLAY
  >> NODE => No node use a CLI
	- npm run dev-server
	- npm run dev-client

  >> Mude as portas que ficam no client e server para que possam se comunicar entre si
  >> Atual: JAVA - Client (3335) & Server (3335) | Node - Client (3334) & Server (3334)
  >> Opções: JAVA - Client (3334) & Server (3335) | Node - Client (3335) & Server (3334)
